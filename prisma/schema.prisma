generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                      @id @default(autoincrement())
  username                String                   @unique @db.VarChar(50)
  password                String                   @db.VarChar(255)
  fullname                String                   @db.VarChar(100)
  created_at              DateTime                 @default(now())
  updated_at              DateTime                 @updatedAt
  role                    String                   @db.VarChar(50)
  route                   String?                  @db.VarChar(255)
  status                  String                   @db.VarChar(50)
  p_sales                 String                   @db.VarChar(50)
  p_accounts              String                   @db.VarChar(50)
  p_view_sales            String                   @db.VarChar(50)
  p_purchases             String                   @db.VarChar(50)
  p_view_purchases        String                   @db.VarChar(50)
  p_sale_return           String                   @db.VarChar(50)
  p_view_products         String                   @db.VarChar(50)
  p_products_management   String                   @db.VarChar(50)
  p_dayend                String                   @db.VarChar(50)
  p_view_expences         String                   @db.VarChar(50)
  p_customer_management   String                   @db.VarChar(50)
  p_discounts             String                   @db.VarChar(50)
  p_employee_management   String                   @db.VarChar(50)
  p_printing              String                   @db.VarChar(50)
  p_view_customers        String                   @db.VarChar(50)
  p_users_management      String                   @db.VarChar(50)
  p_supplier_management   String                   @db.VarChar(50)
  terminal                String?                  @db.VarChar(50)
  store_id                String                   @db.VarChar(50)
  invoices                Invoice[]                @relation("UserInvoices")
  sales                   Sale[]                   @relation("UserSales")
  expenses                Expense[]                @relation("UserExpenses")
  verification_tokens     VerificationToken[]
}

model Role {
  id                      Int                      @id @default(autoincrement())
  role_name               String                   @unique @db.VarChar(50)
  description             String?                  @db.Text
  created_at              DateTime                 @default(now())
  updated_at              DateTime                 @updatedAt
  user_roles              UserRole[]               @relation("RoleUsers")
  role_permissions        RolePermission[]         @relation("RolePermissions")
}

model UserRole {
  id            Int       @id @default(autoincrement())
  user_id       Int
  role_id       Int
  assigned_at   DateTime  @default(now())
  role          Role      @relation("RoleUsers", fields: [role_id], references: [id], onDelete: Cascade, map: "fk_userrole_role")
  @@unique([user_id, role_id])
}

model Permission {
  id                   Int                 @id @default(autoincrement())
  permission_name      String              @unique @db.VarChar(50)
  description          String?             @db.Text
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  role_permissions     RolePermission[]    @relation("PermissionRoles")
}

model RolePermission {
  id             Int         @id @default(autoincrement())
  role_id        Int
  permission_id  Int
  assigned_at    DateTime    @default(now())
  role           Role        @relation("RolePermissions", fields: [role_id], references: [id], onDelete: Cascade, map: "fk_rolepermission_role")
  permission     Permission  @relation("PermissionRoles", fields: [permission_id], references: [id], onDelete: Cascade, map: "fk_rolepermission_permission")
  @@unique([role_id, permission_id])
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  user_id    Int
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, map: "fk_vtoken_user")
  expires_at DateTime
  created_at DateTime @default(now())
}

model Category {
  id              Int            @id @default(autoincrement())
  category_name   String         @db.VarChar(255)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  products        Product[]      @relation("ProductCategory")
  sub_categories  SubCategory[]  @relation("CategoryToSubCategory")
}

model SubCategory {
  id                 Int             @id @default(autoincrement())
  sub_category_title  String          @db.VarChar(255)
  category_id        Int?
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  products           Product[]       @relation("ProductSubCategory")
  category           Category?       @relation("CategoryToSubCategory", fields: [category_id], references: [id], map: "fk_subcat_category")
}

model Product {
  id                   Int                  @id @default(autoincrement())
  item_name            String?              @db.VarChar(255)
  item_code            String?              @db.VarChar(50)
  barcode              String?              @db.VarChar(50)
  uom_id               Int?
  item_description     String?              @db.Text
  enable_batching      Boolean              @default(false)
  quantity             Float                @default(0.0)
  cost_per_unit        Float?
  value                Float                @default(0.0)
  min_order            Float                @default(0.0)
  category_id          Int?
  sub_category_id      Int?
  store_id             Int?
  remarks              String?              @db.Text
  default_tax_account  String               @db.VarChar(50) @default("None")
  additional_cess      String?              @db.VarChar(50)
  purchase_price_ex    Float?
  purchase_price_in    Float?
  sale_price_in        Float?
  sale_price_ex        Float?
  b2b_rate             Float                @default(0.0)
  default_discount     Float?
  category             Category?            @relation("ProductCategory", fields: [category_id], references: [id], map: "fk_product_category")
  sub_category         SubCategory?         @relation("ProductSubCategory", fields: [sub_category_id], references: [id], map: "fk_product_subcategory")
  store                Store?               @relation("StoreProducts", fields: [store_id], references: [id], map: "fk_product_store")
  suppliers            SupplierProduct[]    @relation("ProductSuppliers")
  invoice_items        InvoiceItem[]        @relation("ProductInvoiceItems")
  sale_items           SaleItem[]           @relation("ProductSaleItems")
  uom                  UnitOfMeasurement?   @relation("ProductUOM", fields: [uom_id], references: [id], map: "fk_product_uom")
}

model Supplier {
  id                 Int                @id @default(autoincrement())
  supplier_name      String             @db.VarChar(255)
  contact_name       String?            @db.VarChar(255)
  email              String?            @unique @db.VarChar(255)
  phone              String?            @db.VarChar(50)
  address            String?            @db.Text
  bank_name          String?            @db.VarChar(50)
  bank_accountno     String?            @db.VarChar(50)
  balance            Float              @default(0.0)
  tax_id             String?            @db.VarChar(50)
  payment_terms      String             @db.VarChar(50) @default("Net 30")
  status             String             @db.VarChar(20) @default("Active")
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  products           SupplierProduct[]  @relation("SupplierProducts")
  ledger_entries     SupplierLedger[]   @relation("SupplierLedgerEntries")
  invoices           Invoice[]          @relation("SupplierInvoices")
  invoice_items      InvoiceItem[]      @relation("SupplierInvoiceItems")
  sales              Sale[]             @relation("SupplierSales")
}

model SupplierProduct {
  supplier_id Int
  product_id  Int
  supplier    Supplier @relation("SupplierProducts", fields: [supplier_id], references: [id], onDelete: Cascade, map: "fk_sup_prod_supplier")
  product     Product  @relation("ProductSuppliers", fields: [product_id], references: [id], onDelete: Cascade, map: "fk_sup_prod_product")
  created_at  DateTime @default(now())
  @@id([supplier_id, product_id])
}

model Invoice {
  id                     Int               @id @default(autoincrement())
  store_id               Int
  supplier_id            Int
  user_id                Int?
  total_amount           Float
  tax_amount             Float
  net_total              Float
  pre_balance            Float
  payment                Float
  balance                Float
  paymode                String
  bank_name              String
  bank_cardno            String
  details                String           @db.Text
  invoice_id             String           @unique @db.VarChar(50)
  created_at             DateTime         @default(now())
  updated_at             DateTime         @updatedAt
  store                  Store            @relation("StoreInvoices", fields: [store_id], references: [id], map: "fk_invoice_store")
  supplier               Supplier         @relation("SupplierInvoices", fields: [supplier_id], references: [id], map: "fk_invoice_supplier")
  user                   User?            @relation("UserInvoices", fields: [user_id], references: [id], onDelete: SetNull, map: "fk_invoice_user")
  invoice_items          InvoiceItem[]    @relation("InvoiceItems")
  supplier_ledger_entries SupplierLedger[] @relation("InvoiceSupplierLedger")
  customer_ledger_entries CustomerLedger[] @relation("InvoiceCustomerLedger")
  @@index([invoice_id])
}

model InvoiceItem {
  id              Int        @id @default(autoincrement())
  invoice_id      Int
  product_id      Int
  unit_price      Float
  quantity        Float 
  total_amount    Float  
  tax_setting_id  Int?
  tax_amount      Float
  discount_per    Float
  discount_amount Float
  net_total       Float
  supplier_id     Int
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  invoice         Invoice    @relation("InvoiceItems", fields: [invoice_id], references: [id], onDelete: Cascade, map: "fk_invoiceitem_invoice")
  supplier        Supplier   @relation("SupplierInvoiceItems", fields: [supplier_id], references: [id], map: "fk_invoiceitem_supplier")
  product         Product    @relation("ProductInvoiceItems", fields: [product_id], references: [id], onDelete: NoAction, map: "fk_invoiceitem_product")
}

model Store {
  id            Int         @id @default(autoincrement())
  branch_title   String      @db.VarChar(255)
  sub_title      String     @db.Text @default("")
  address       String?     @db.Text
  phone         String?     @db.VarChar(50)
  email         String?     @db.VarChar(50)
  logo_path     String?     @db.Text
  website       String?     @db.Text
  tax_no        String?     @db.Text
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  products      Product[]   @relation("StoreProducts")
  invoices      Invoice[]   @relation("StoreInvoices")
  sales         Sale[]      @relation("StoreSales")
  expenses      Expense[]   @relation("StoreExpenses")
}

model TaxSetting {
  id              Int           @id @default(autoincrement())
  tax_name        String        @db.VarChar(255)
  tax_per         Float         @default(0)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model UnitOfMeasurement {
  id            Int       @id @default(autoincrement())
  uom_title      String    @db.VarChar(255)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  products      Product[] @relation("ProductUOM")
}


model Sale {
  id                     Int          @id @default(autoincrement())
  user_id                Int
  supplier_id            Int?
  store_id               Int?
  due_date               DateTime     @default(now())
  total_amount           Float        @default(0.0)
  discount_amount        Float        @default(0.0)
  total_tax              Float        @default(0.0)
  net_total              Float        @default(0.0)
  payment_status         String       @db.VarChar(20) @default("Pending")
  payment_type           String?
  payment                Float        @default(0.0)
  details                String       @db.Text
  created_at             DateTime     @default(now())
  updated_at             DateTime     @updatedAt
  user                   User         @relation("UserSales", fields: [user_id], references: [id], map: "fk_sale_user")
  supplier               Supplier?    @relation("SupplierSales", fields: [supplier_id], references: [id], map: "fk_sale_supplier")
  store                  Store?       @relation("StoreSales", fields: [store_id], references: [id], map: "fk_sale_store")
  sale_items             SaleItem[]   @relation("SaleItems")
  customer_ledger_entries CustomerLedger[] @relation("SaleCustomerLedger")
}

model SaleItem {
  id                Int          @id @default(autoincrement())
  sale_id           Int
  product_id        Int
  tax_setting_id    Int?
  quantity          Float
  unit_price        Float
  total             Float        @default(0.0)
  dis_per           Float?       @default(0.0)
  dis_amount        Float?       @default(0.0)
  tax_per           Float?       @default(0.0)
  tax_amount        Float?       @default(0.0)
  net_total         Float        @default(0.0)
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  sale              Sale         @relation("SaleItems", fields: [sale_id], references: [id], onDelete: Cascade, map: "fk_saleitem_sale")
  product           Product      @relation("ProductSaleItems", fields: [product_id], references: [id], map: "fk_saleitem_product")
}

model ExpenseCategory {
  id            Int       @id @default(autoincrement())
  category_name String    @db.VarChar(255)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  expenses      Expense[] @relation("ExpenseCategoryExpenses")
}

model Expense {
  id                     Int              @id @default(autoincrement())
  user_id                Int
  store_id               Int?
  category_id            Int?
  amount                 Float
  payment_status         String           @db.VarChar(20) @default("Pending")
  expense_date           DateTime         @default(now())
  description            String?          @db.Text
  created_at             DateTime         @default(now())
  updated_at             DateTime         @updatedAt
  user                   User      @relation("UserExpenses", fields: [user_id], references: [id])
  store                  Store?           @relation("StoreExpenses", fields: [store_id], references: [id], map: "fk_expense_store")
  category               ExpenseCategory? @relation("ExpenseCategoryExpenses", fields: [category_id], references: [id], map: "fk_expense_category")
  supplier_ledger_entries SupplierLedger[] @relation("ExpenseSupplierLedger")
}

model SupplierLedger {
  id                Int          @id @default(autoincrement())
  ledger_number     String       @unique @db.VarChar(50)
  supplier_id       Int
  transaction_type  String       @db.VarChar(50)
  amount            Float
  balance           Float
  transaction_date  DateTime     @default(now())
  invoice_id        Int?
  expense_id        Int?
  description       String?      @db.Text
  created_at        DateTime     @default(now())
  updated_at        DateTime     @updatedAt
  supplier          Supplier     @relation("SupplierLedgerEntries", fields: [supplier_id], references: [id], map: "fk_supplierledger_supplier")
  expense           Expense?     @relation("ExpenseSupplierLedger", fields: [expense_id], references: [id], onDelete: NoAction, map: "fk_supplierledger_expense")
  invoice           Invoice?     @relation("InvoiceSupplierLedger", fields: [invoice_id], references: [id], onDelete: NoAction, map: "fk_supplierledger_invoice")
  @@index([ledger_number])
}